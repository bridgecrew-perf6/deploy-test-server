variables:
  CHART: testserver
  SCRIPTS_REPO: https://$SCRIPTS_USER:$SCRIPTS_TOKEN@gitlab.com/cgerull-orchestration/ci-scripts
  YQ_VERSION: v4.24.2
  YQ_BINARY: yq_linux_amd64
before_script:
  - export SCRIPTS_DIR=$(mktemp -d)
  - git clone -q --depth 1 "${SCRIPTS_REPO}" "${SCRIPTS_DIR}"
  - "[ -f ./version ] && export VERSION=$(cat ./version)"

# default:
#   tags:
#     - ubuntu

stages:
  - prepare
  - build
  - test
  - publish

version:
  image: python:3.7-stretch
  stage: prepare
  script:
    - pip install semver
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts && chmod 644 ~/.ssh/known_hosts
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    - $SCRIPTS_DIR/common/gen-semver.py > version
  artifacts:
    paths:
      - version
  only:
    - branches

environment:
  stage: prepare
  script:
    - env


build-chart-package:
  stage: "build"
  variables:
    CHART: testserver
  script:
    - curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
    - curl -L https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/${YQ_BINARY}.tar.gz > ${YQ_BINARY}.tar.gz
    - tar -zxf ${YQ_BINARY}.tar.gz
    - chmod +x ${YQ_BINARY} && mv ${YQ_BINARY} /usr/bin/yq
    - echo "ls ./version && cat ./version"
    - echo "Version ${VERSION}"
    - echo "CI_COMMIT_REF_NAME ${CI_COMMIT_REF_NAME}"
    - echo "CI_COMMIT_TAG ${CI_COMMIT_TAG}"
    - echo "CI_PIPELINE_IID ${CI_PIPELINE_IID}"
    - echo "CI_PIPELINE_SOURCE ${CI_PIPELINE_SOURCE}"
    - echo "CI_COMMIT_SHA ${CI_COMMIT_SHA}"
    # - echo "PWD $(ls -lisa)"
    # - echo "TMP $(ls -lisa ${SCRIPTS_DIR})"
    # - echo "bin $(ls -lisa /bin)"
    # - echo "usrbin $(ls -lisa /usr/bin)"
    # - echo "env $(env)"
    # - helm version
    # - yq version
    - ${SCRIPTS_DIR}/build/build-helm-package.sh ${CHART} ${CI_PIPELINE_IID}
  only:
    - optimize-for-argocd
  artifacts:
    paths:
    - ${CHART}-*.tgz
    expire_in: 1 week

generate-manifests:
  stage: build
  script:
    - curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
    - ${SCRIPTS_DIR}/build/generate-kubernetes-manifests.sh ${CHART} dev
  only:
    refs:
      - optimize-for-argocd
    changes:
      - charts

test-manifests:
  stage: "test"
  script:
    - ${SCRIPTS_DIR}/test/test-kubernetes-manifests.sh ${CHART} dev
  only:
    refs:
      - optimize-for-argocd
    changes:
      - kubernetes

publish-helm-chart:
  variables:
    CHANNEL: "stable"
  needs:
    - build-chart-package
  image: curlimages/curl:latest
  stage: publish
  script:
    - |
      for file in $(ls ${CHART}-*.tgz); do
        echo "Upload ${file} to ${CI_API_V4_URL}"
        curl --request POST --user gitlab-ci-token:$CI_JOB_TOKEN --form "chart=@${file}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/api/${CHANNEL}/charts"
      done
  only:
    # merge_requests is another option
    - main